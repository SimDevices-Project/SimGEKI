name: Auto-Build-Firmware
run-name: Building Firmware...
on:
  push:
    branches: [ main, master ]  # Only active on main branch for nightly builds
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
jobs:
  build-firmware:
    name: Build Multi-Target Firmware
    runs-on: windows-2022
    permissions:
      contents: write
      actions: read
    strategy:
      matrix:
        target: [SimGETRO_Public, SimGETRO_EarlyHardware]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Clean build artifacts
        run: |
          make clean_all
      
      - name: Build firmware for ${{ matrix.target }}
        run: |
          make TARGET=${{ matrix.target }} all -j4
      
      - name: Create output directory and copy firmware files
        run: |
          mkdir "output-${{ matrix.target }}"
          Copy-Item "./build/${{ matrix.target }}/SimGEKI.bin" -Destination "./output-${{ matrix.target }}/SimGEKI-${{ matrix.target }}.bin" -Force
          Copy-Item "./build/${{ matrix.target }}/SimGEKI.hex" -Destination "./output-${{ matrix.target }}/SimGEKI-${{ matrix.target }}.hex" -Force
        shell: pwsh
      
      - name: Upload firmware to artifacts (bin)
        uses: actions/upload-artifact@v4
        with:
          name: SimGEKI-${{ matrix.target }}_firmware_bin
          path: ./output-${{ matrix.target }}/SimGEKI-${{ matrix.target }}.bin
          retention-days: 90
      
      - name: Upload firmware to artifacts (hex)
        uses: actions/upload-artifact@v4
        with:
          name: SimGEKI-${{ matrix.target }}_firmware_hex
          path: ./output-${{ matrix.target }}/SimGEKI-${{ matrix.target }}.hex
          retention-days: 90
      
      - name: Upload files to release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'nightly-builds')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./output-${{ matrix.target }}/SimGEKI-${{ matrix.target }}.bin
            ./output-${{ matrix.target }}/SimGEKI-${{ matrix.target }}.hex

  # Nightly builds job - collect all artifacts and update nightly branch
  update-nightly-builds:
    name: Update Nightly Branch
    runs-on: windows-2022
    permissions:
      contents: write
      actions: read
    needs: build-firmware
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./nightly-artifacts
      
      - name: Prepare nightly release files
        run: |
          mkdir "nightly-release"
          # Copy all 'bin' & 'hex' files into 'nightly-release' directory
          Get-ChildItem -Path "./nightly-artifacts" -Recurse -Include "*.bin", "*.hex" | ForEach-Object {
            Copy-Item $_.FullName -Destination "./nightly-release/" -Force
          }
          # Show file list for debugging
          Write-Host "Files prepared for nightly release:"
          Get-ChildItem -Path "./nightly-release/"
        shell: pwsh
      
      - name: Create/Update nightly branch and commit files
        run: |
          # Configure git user
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Clean up any existing nightly references to avoid conflicts
          Write-Host "Cleaning up existing nightly references..."
          try { git branch -D nightly } catch { Write-Host "Local nightly branch not found" }
          try { git tag -d nightly } catch { Write-Host "Local nightly tag not found" }
          try { git push origin --delete nightly } catch { Write-Host "Remote nightly branch/tag not found" }
          
          # Create or switch to nightly branch from current commit
          Write-Host "Creating fresh nightly branch..."
          git checkout -b nightly
          
          # Copy firmware files to the root for easy access
          Write-Host "Copying firmware files to nightly branch..."
          Copy-Item "./nightly-release/*" -Destination "./" -Force
          
          # Add firmware files to git
          git add *.bin *.hex
          
          # Check if there are changes to commit
          $changes = git diff --staged --name-only
          if ($changes) {
            Write-Host "Committing firmware files..."
            git commit -m "🌙 Nightly Build - Auto-updated
            
            📅 Build Date: ${{ github.event.head_commit.timestamp }}
            🔨 Commit: ${{ github.sha }}
            👤 Author: ${{ github.event.head_commit.author.name }}
            💬 Message: ${{ github.event.head_commit.message }}

            Available firmware variants:
            - SimGEKI-SimGETRO_Public.bin/hex - Public release version  
            - SimGEKI-SimGETRO_EarlyHardware.bin/hex - Early hardware version"
            
            # Push the nightly branch explicitly specifying it's a branch
            Write-Host "Pushing nightly branch to remote..."
            git push origin refs/heads/nightly:refs/heads/nightly --force
          } else {
            Write-Host "No changes to commit"
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Delete existing nightly release and tag
        continue-on-error: true
        run: |
          # 使用 GitHub CLI 删除现有的 nightly release（如果存在）
          Write-Host "Attempting to delete existing nightly release..."
          try { 
            gh release delete nightly --yes 
            Write-Host "Existing nightly release deleted"
          } catch { 
            Write-Host "No existing nightly release found or already deleted"
          }
          
          # 删除远程 nightly tag（如果存在）
          Write-Host "Attempting to delete remote nightly tag..."
          try { 
            git push origin --delete refs/tags/nightly 
            Write-Host "Remote nightly tag deleted"
          } catch { 
            Write-Host "Remote nightly tag not found"
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create new nightly release with updated info
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          target_commitish: nightly
          name: "SimGEKI Firmware Nightly Builds (Updated ${{ github.event.head_commit.timestamp }})"
          body: |
            # 🌙 SimGEKI Nightly Builds - Auto Updated!

            ## ℹ️ What is this?

            Nightly Builds are the latest development versions of the SimGEKI firmware, automatically built with every commit to the main branch. This means you always have access to the most recent changes and features, but please note that these builds are not guaranteed to be stable.

            ## 🚀 How to use?

            Download the firmware files from the assets below and flash them to your SimGEKI device. Make sure to check the compatibility with your hardware version. 
            
            📖 **Flash Instructions**: [Update Firmware Guide](https://sim.bysb.net/#/simgeki2/configs/update-firmware/)

            ## 📋 Latest Build Information

            📅 **Build Time**: ${{ github.event.head_commit.timestamp }}  
            🔨 **Source Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            👤 **Author**: ${{ github.event.head_commit.author.name }}  
            💬 **Commit Message**: 
            ```
            ${{ github.event.head_commit.message }}
            ```

            ## 📦 Available Firmware Variants

            | Variant | Description | Download |
            |---------|-------------|----------|
            | **SimGETRO_Public** | Public release version | [📥 BIN](https://github.com/${{ github.repository }}/releases/download/nightly/SimGEKI-SimGETRO_Public.bin) / [📥 HEX](https://github.com/${{ github.repository }}/releases/download/nightly/SimGEKI-SimGETRO_Public.hex) |
            | **SimGETRO_EarlyHardware** | Early hardware version | [📥 BIN](https://github.com/${{ github.repository }}/releases/download/nightly/SimGEKI-SimGETRO_EarlyHardware.bin) / [📥 HEX](https://github.com/${{ github.repository }}/releases/download/nightly/SimGEKI-SimGETRO_EarlyHardware.hex) |

            ## ⚠️ Important Notes

            - 🔄 **Auto-Updated**: This release is automatically updated with every commit to the main branch
            - 🧪 **Development Build**: These builds may be unstable and are intended for testing
            - 📅 **Last Updated**: ${{ github.event.head_commit.timestamp }}
            - 🌐 **Repository**: [SimDevices-Project/SimGEKI](https://github.com/${{ github.repository }})

            ---
            
            💡 **Tip**: For stable releases, check the [official releases](https://github.com/${{ github.repository }}/releases) page.
          prerelease: true
          files: |
            ./nightly-release/*
